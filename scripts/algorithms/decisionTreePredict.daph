#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# Modifications 2023 The DAPHNE Consortium.
#
#-------------------------------------------------------------

# This script has been manually translated from Apache SystemDS.

# This script implements random forest prediction for recoded and binned
# categorical and numerical input features.
# Hummingbird paper (https://www.usenix.org/system/files/osdi20-nakandala.pdf).
#
# INPUT:
# ------------------------------------------------------------------------------
# X               Feature matrix in recoded/binned representation
# y               Label matrix in recoded/binned representation,
#                 optional for accuracy evaluation
# ctypes          Row-Vector of column types [1 scale/ordinal, 2 categorical]
# M               Matrix M holding the learned tree in linearized form
#                 see decisionTree() for the detailed tree representation.
# strategy        Prediction strategy, can be one of ["GEMM", "TT", "PTT"],
#                 referring to "Generic matrix multiplication",
#                 "Tree traversal", and "Perfect tree traversal", respectively
# verbose         Flag indicating verbose debug output
# ------------------------------------------------------------------------------
#
# OUTPUT:
# ------------------------------------------------------------------------------
# yhat            Label vector of predictions
# ------------------------------------------------------------------------------

# TODO Many occurrences of `ctable(seq(1.0`: .0 should not be necessary.

def createTTNodeTensors( M:matrix<f64> )
  -> matrix<f64>, matrix<f64>, matrix<f64>, matrix<f64>, matrix<f64>, matrix<f64>
{
  # all tree nodes (inner and leaf nodes)
  M2 = reshape(M, ncol(M)/2, 2);
  # TODO .0 should not be necessary.
  NID = seq(1.0, nrow(M2), 1);
  nI = (M2[,0]!=0 || M2[,1]!=0); # TODO no ; in DML
  cnI = cumSum(nI);
  N = t(NID[[nI, ]]);
  n_nodes = ncol(N); # TODO no ; in DML

  # left/right child node ids, default self-id
  N_L = t(((M2[,0]!=0) ? 2*NID : NID)[[nI, ]]);
  N_R = t(((M2[,0]!=0) ? 2*NID+1 : NID)[[nI, ]]);

  # recoding to node vector positions (removed non-existing nodes)
  # TODO is ctable with #rows/#cols only meant for growing the result or also for shrinking it;
  #      if the latter is never the case, ctable should have bounds checks, to catch bugs
  N_L = t(ctable(seq(0.0,n_nodes - 1,1), t(N_L) - 1, n_nodes, nrow(M2)) @ cnI);
  N_R = t(ctable(seq(0.0,n_nodes - 1,1), t(N_R) - 1, n_nodes, nrow(M2)) @ cnI);

  # node feature IDs (positions) and threshold values
  # TODO .0 in `: 1.0` and `: 0.0` should not be necessary
  N_F = t(((M2[,0]!=0) ? M2[,0] : 1.0)[[nI, ]]);
  N_T = t(((M2[,0]!=0) ? M2[,1] : 0.0)[[nI, ]]);

  C = M2[,1][[nI, ]];

  return N, N_L, N_R, N_F, N_T, C;
}

def predict_TT (M:matrix<f64>, X:matrix<f64>) -> matrix<f64>
{
  # initialization of model tensors and parameters
  N, N_L, N_R, N_F, N_T, C = createTTNodeTensors(M); # TODO no ; in DML
  nr = nrow(X); n = ncol(N_L);
  tree_depth = ceil(log(aggMax(N)+1,2)); # max depth # TODO no ; in DML


  # TODO .0 should not be necessary, but if we write just 1, then inference pass
  # does not terminate for the WhileOp (see that while(true)-loop in InferencePass.cpp).
  Ti = fill(1.0, nr, 1); # current nodes (start at root) # TODO 1.0?
  # TODO as.f64 should not be necessary, but otherwise, this input to the while-loop is set to unknown
  # due to mismatching types (see the line below where noChange is set in the loop)
  noChange = as.f64(false); i = 1;
  # TODO Support for unary NOT (!-operator).
  # TODO as.si64 should not be necessary, but ewAndOp does not support i1 operands yet
  while( as.si64((noChange == false)) && i <= tree_depth) {
    # TODO where to start seq: 0 or 1
    P = ctable(seq(0.0,nr - 1,1), Ti - 1, nr, n);
    TF = P @ t(N_F); # get node feature indexes
    # TODO where to start seq: 0 or 1
    Tv = sum(X * ctable(seq(0.0,nr - 1,1),TF - 1,nr,ncol(X)), 0); # get feature values
    Tt = P @ t(N_T); # get node thresholds
    TL = P @ t(N_L); # get node left paths
    TR = P @ t(N_R); # get node right paths
    # pick left or right path for each record separately
    Ti_new = (Tv <= Tt) ? TL : TR;
    noChange = sum(Ti != Ti_new) == 0;
    i = i + 1;
    Ti = Ti_new;
  }

  # extract classes
  yhat = ctable(seq(0.0,nr - 1,1), Ti - 1, nr, n) @  C;

  return yhat;
}

# TODO support the GEMM strategy
/*
def createGEMMNodeTensors( M:matrix<f64>, m:si64 )
  -> matrix<f64>, matrix<f64>, matrix<f64>, matrix<f64>, matrix<f64>
{
  #TODO update for new model layout and generalize
  # TODO stop() (XXX).
  print("GEMM not fully supported yet");

  nin = sum(M[1,]!=0); # num inner nodes

  # predicate map [#feat x #inodes] and values [1 x #inodes]
  I1 = M[2,][[, sum(M[2,]!=0, 1)>0]];
  A = ctable(I1, seq(1,nin,1), m, nin);
  B = M[5,][[, M[1,]!=0]];

  # bucket paths [#inodes x #paths] and path sums
  I2 = (M[1,] == 0); # TODO no ; in DML
  np = ncol(M) - nin;
  C = reshape([1.0, -1.0], 1, 2); # TODO general case
  D = sum(max(C, 0), 1);

  # class map [#paths x #classes]
  E = ctable(seq(1.0,ncol(C),1), t(M[3,(ncol(M)-ncol(C)):ncol(M)]));

  return A, B, C, D, E;
}

def predict_GEMM(M:matrix<f64>, X:matrix<f64>) -> matrix<f64>
{
  # initialization of model tensors and parameters
  # TODO The cast to si64 should happen automatically.
  A, B, C, D, E = createGEMMNodeTensors(M, as.si64(ncol(X)));

  # scoring pipeline, evaluating all nodes in parallel # TODO "pipline" in DML
  # TODO The necessity of the cast to f64 is debatable.
  Y = as.f64(idxMax(((((X @ A) < B) @ C) == D) @ E, 0));

  return Y;
}
*/

# TODO Support strategy as str.
# strategy: 0="TT", 1="GEMM"
def decisionTreePredict(X:matrix<f64>, y:matrix<f64> /*= fill(0.0,0,0)*/,
    ctypes:matrix<f64>, M:matrix<f64>, strategy:/*str*/si64/*="TT"*/, verbose:bool /*= false*/)
  -> matrix<f64>
{
  # TODO This should not be necessary.
  yhat = [0.0];
  if( strategy == 0 )
    yhat = predict_TT(M, X);
  #else if( strategy == 1 )
  #  yhat = predict_GEMM(M, X);
  else {
    print ("No such strategy" + strategy); # TODO no ; in DML
    yhat = fill(0.0, 0, 0); # TODO no ; in DML
  }

  return yhat;
}